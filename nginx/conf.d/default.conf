server {
    listen 80;
    server_name 192.168.1.8;

    location / {
        return 301 https://$host$request_uri/;
    }
}

server {
    listen 443 ssl;
    server_name 192.168.1.8;  # Your server's local IP

    # Self-signed SSL certificate and key
    ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;

    # Insecure SSL Protocols
    ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1;

    # Insecure Cipher Suites
    ssl_ciphers 'NULL-MD5:NULL-SHA:EXP-RC4-MD5:EXP-DES-CBC-SHA:DES-CBC-SHA:EXP-EDH-RSA-DES-CBC-SHA:EXP-EDH-DSS-DES-CBC-SHA:EDH-RSA-DES-CBC-SHA:EDH-DSS-DES-CBC-SHA:RC4-MD5:RC4-SHA:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-SHA:AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES128-SHA:DHE-DSS-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA';

    ssl_prefer_server_ciphers on;  # Server chooses weak ciphers even if client supports better ones

    # Proxy Settings (to forward HTTPS requests to Node.js running on port 3000)
    location / {
        proxy_pass http://127.0.0.1:3000/;  # Backend is your Node.js app
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}